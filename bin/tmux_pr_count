#!/usr/bin/env ruby

require 'digest/md5'
require 'fileutils'
require 'optparse'

options = {}
OptionParser.new do |opt|
  opt.on('--cwd CWD') { |o| options[:cwd] = o }
end.parse!

cwd = options[:cwd] || Dir.pwd
Dir.chdir(cwd)

def min_to_sec(min)
  min * 60
end

def wip_labels
  if ENV['GITHUB_WIP_LABELS']
    ENV['GITHUB_WIP_LABELS'].split(',').map { |label| ". == \"#{label.strip}\"" }.join(' or ')
  else
    ". == \"WIP\" or . == \"POC\""
  end
end

def pr_list_count(cwd = Dir.pwd)
  cmd = "gh pr list --state open --json number,title,author,labels,isDraft,reviews --jq '.[] | select(.isDraft == false and .author.login != \"rtalexk\" and ([.labels[].name | select(#{wip_labels})] | length == 0) and ([.reviews[] | select(.author.login == \"rtalexk\" and .state == \"APPROVED\")] | length == 0)) | {number, title, author, labels}'"

  # Cache settings
  expiry = min_to_sec 10
  expire_date = Time.now.utc - expiry

  # Generate cache file path
  program = File.basename($PROGRAM_NAME)
  hash = Digest::MD5.hexdigest("#{cwd};#{cmd}")
  cachedir = File.join(ENV['HOME'], '.cache', program)
  cache_file = File.join(cachedir, hash)

  # Ensure cache directory exists
  FileUtils.mkdir_p(cachedir)

  if File.exist?(cache_file)
    file_date = File.stat(cache_file).mtime

    if file_date < expire_date
      update_cache(cmd, cache_file)
    end

    content = File.read(cache_file).strip
    content.empty? ? 0 : content.lines.count
  else
    update_cache(cmd, cache_file)

    # Assume 0 PRs if cache file does not exist, next run will have the correct count
    0
  end
end

def update_cache(cmd, cache_file)
  Process.fork { system("#{cmd} > #{cache_file} 2>&1") }
end

def has_remote?(cwd = Dir.pwd)
  remote = `git remote -v`.strip.chomp
  !remote.empty?
end

if system("is_git_repo") && has_remote?(cwd)
  puts pr_list_count(cwd)
else
  puts "NA"
end
